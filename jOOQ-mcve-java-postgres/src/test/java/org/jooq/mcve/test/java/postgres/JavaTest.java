package org.jooq.mcve.test.java.postgres;

import org.jooq.*;
import org.jooq.conf.ParamType;
import org.jooq.conf.Settings;
import org.jooq.impl.DSL;
import org.jooq.mcve.java.postgres.tables.records.TestRecord;
import org.jooq.tools.JooqLogger;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.testcontainers.containers.PostgreSQLContainer;
import org.testcontainers.utility.ResourceReaper;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;

import static org.jooq.mcve.java.postgres.Tables.TEST;
import static org.junit.Assert.*;

public class JavaTest {

    static JooqLogger             log = JooqLogger.getLogger(JavaTest.class);
    static PostgreSQLContainer<?> db;
    static Connection             connection;
    static DSLContext             ctx;

    @BeforeClass
    public static void init() throws SQLException {
        if (System.getProperty("db.url") == null) {
            db = new org.testcontainers.containers.PostgreSQLContainer<>("postgres:latest")
                 .withUsername("postgres")
                 .withDatabaseName("postgres")
                 .withPassword("postgres")
                 .withInitScript("db/migration/init.sql");

            db.start();
            System.setProperty("db.url", db.getJdbcUrl());
            System.setProperty("db.username", db.getUsername());
            System.setProperty("db.password", db.getPassword());
        }

        Properties properties = new Properties();
        properties.setProperty("username", "postgres");
        properties.setProperty("password", "postgres");

        log.info("Connecting");
        connection = DriverManager.getConnection(
            System.getProperty("db.url"),
            System.getProperty("db.username"),
            System.getProperty("db.password")
        );

        // doesn't work when set on the context
        ctx = DSL.using(connection, SQLDialect.POSTGRES, new Settings().withParamType(ParamType.INLINED));

        // Use JDBC directly instead of jOOQ to avoid DEBUG logging all of this
        try (Statement s = connection.createStatement()) {
            log.info("Finished setup");
        }
    }

    @AfterClass
    public static void end() {
        if (db != null) {
            ResourceReaper.instance().stopAndRemoveContainer(db.getContainerId(), db.getDockerImageName());
        }
    }

    @Before
    public void setup() throws Exception {
        ctx.delete(TEST).execute();
    }

    @After
    public void after() throws Exception {
    }

    @Test
    public void mcveTest() {
        String valueAsString = """
                {"a": 20.00}
                """.trim();
        InsertValuesStep1<TestRecord, JSONB> query = ctx.insertInto(TEST)
                .columns(TEST.CD)
                .values(JSONB.jsonb(valueAsString));
        query.configuration().settings().withParamType(ParamType.INLINED);
        // doesn't work when set on the query. That's expected as query.configuration() returns the same object as DslConte
        assertSame(ctx.configuration(), query.configuration());
        /*
        Simple java code show the issue, but here you can set a breakpoint in JSONB.data() and notice the value is bound and not inlined
        data:89, JSONB (org.jooq)
        set0:5671, DefaultBinding$DefaultJSONBBinding (org.jooq.impl)
        set0:5628, DefaultBinding$DefaultJSONBBinding (org.jooq.impl)
        set:1056, DefaultBinding$InternalBinding (org.jooq.impl)
        bindValue0:65, DefaultBindContext (org.jooq.impl)
        bindValue:74, AbstractBindContext (org.jooq.impl)
        accept:216, Val (org.jooq.impl)
        bindInternal:258, AbstractBindContext (org.jooq.impl)
        visit0:68, AbstractBindContext (org.jooq.impl)
        visit:350, AbstractContext (org.jooq.impl)
        acceptElement:253, QueryPartCollectionView (org.jooq.impl)
        accept:223, QueryPartCollectionView (org.jooq.impl)
        bindInternal:258, AbstractBindContext (org.jooq.impl)
        visit0:68, AbstractBindContext (org.jooq.impl)
        visit:350, AbstractContext (org.jooq.impl)
        execute:342, AbstractQuery (org.jooq.impl)
        execute:115, AbstractDelegatingQuery (org.jooq.impl)
        mcveTest:97, JavaTest (org.jooq.mcve.test.java.postgres)
        ...
        */
        int inserted = query.execute();
        /*
        if you add a breakpoint here and check with 'select * from pg_stat_activity;' from psql
        the last query executed actually used bind values

        insert into "mcve"."test" ("cd") values (cast($1 as jsonb))
         */
        assertEquals(1, inserted);
    }
}
